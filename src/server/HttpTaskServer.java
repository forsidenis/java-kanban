package server;

import com.google.gson.Gson;
import com.sun.net.httpserver.HttpServer;
import manager.Managers;
import manager.TaskManager;
import task.Epic;
import task.Subtask;
import task.Task;
import task.Status;

import java.io.IOException;
import java.net.InetSocketAddress;

public class HttpTaskServer {
    private static final int PORT = 8080;
    private final HttpServer server;
    private final TaskManager taskManager;
    private final Gson gson;

    public HttpTaskServer() throws IOException {
        this(Managers.getDefault(), true); // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    }

    public HttpTaskServer(TaskManager taskManager) throws IOException {
        this(taskManager, false); // –î–ª—è —Ç–µ—Å—Ç–æ–≤ - –±–µ–∑ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    }

    public HttpTaskServer(TaskManager taskManager, boolean addTestData) throws IOException {
        this.taskManager = taskManager;
        this.gson = GsonFactory.createGson();
        this.server = HttpServer.create(new InetSocketAddress(PORT), 0);

        if (addTestData) {
            addTestData();
        }
        configureRoutes();
    }

    private void addTestData() {
        try {
            System.out.println("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...");

            // –°–æ–∑–¥–∞–µ–º –æ–±—ã—á–Ω—ã–µ –∑–∞–¥–∞—á–∏
            Task task1 = new Task("–ü–æ–º—ã—Ç—å –ø–æ—Å—É–¥—É", "–°—Ä–æ—á–Ω–∞—è –∑–∞–¥–∞—á–∞");
            Task task2 = new Task("–°–¥–µ–ª–∞—Ç—å –î–ó", "–ü–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é");
            taskManager.createTask(task1);
            taskManager.createTask(task2);

            // –°–æ–∑–¥–∞–µ–º —ç–ø–∏–∫–∏
            Epic epic1 = new Epic("–û—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –ø—Ä–∞–∑–¥–Ω–∏–∫", "–°–µ–º–µ–π–Ω–æ–µ —Ç–æ—Ä–∂–µ—Å—Ç–≤–æ");
            taskManager.createEpic(epic1);

            // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∑–∞–¥–∞—á–∏
            Subtask subtask1 = new Subtask("–ö—É–ø–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã", "–î–ª—è –ø—Ä–∞–∑–¥–Ω–∏–∫–∞", epic1.getId());
            Subtask subtask2 = new Subtask("–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –≥–æ—Å—Ç–µ–π", "–°–æ—Å—Ç–∞–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", epic1.getId());
            Subtask subtask3 = new Subtask("–ó–∞–∫–∞–∑–∞—Ç—å —Ç–æ—Ä—Ç", "–®–æ–∫–æ–ª–∞–¥–Ω—ã–π", epic1.getId());
            taskManager.createSubtask(subtask1);
            taskManager.createSubtask(subtask2);
            taskManager.createSubtask(subtask3);

            // –°–æ–∑–¥–∞–µ–º —ç–ø–∏–∫ –±–µ–∑ –ø–æ–¥–∑–∞–¥–∞—á
            Epic epic2 = new Epic("–ö—É–ø–∏—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É", "–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å");
            taskManager.createEpic(epic2);

            // –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            subtask1.setStatus(Status.DONE);
            taskManager.updateSubtask(subtask1);

            task2.setStatus(Status.IN_PROGRESS);
            taskManager.updateTask(task2);

            // –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
            taskManager.getTaskById(task1.getId());
            taskManager.getEpicById(epic1.getId());
            taskManager.getSubtaskById(subtask1.getId());

            System.out.println("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã:");
            System.out.println("   - –ó–∞–¥–∞—á: " + taskManager.getAllTasks().size());
            System.out.println("   - –≠–ø–∏–∫–æ–≤: " + taskManager.getAllEpics().size());
            System.out.println("   - –ü–æ–¥–∑–∞–¥–∞—á: " + taskManager.getAllSubtasks().size());
            System.out.println("   - –ò—Å—Ç–æ—Ä–∏—è: " + taskManager.getHistory().size() + " –∑–∞–ø–∏—Å–µ–π");

        } catch (Exception e) {
            System.out.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private void configureRoutes() {
        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
        server.createContext("/tasks", new TasksHandler(taskManager, gson));
        server.createContext("/subtasks", new SubtasksHandler(taskManager, gson));
        server.createContext("/epics", new EpicsHandler(taskManager, gson));
        server.createContext("/history", new HistoryHandler(taskManager, gson));
        server.createContext("/prioritized", new PrioritizedHandler(taskManager, gson));

        System.out.println("‚úÖ –ú–∞—Ä—à—Ä—É—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã");
    }

    public void start() {
        server.start();
        System.out.println("==================================================");
        System.out.println("üöÄ HTTP Task Server –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É " + PORT);
        System.out.println("==================================================");
        System.out.println("–î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:");
        System.out.println("‚Ä¢ GET  http://localhost:8080/tasks");
        System.out.println("‚Ä¢ GET  http://localhost:8080/tasks/{id}");
        System.out.println("‚Ä¢ POST http://localhost:8080/tasks");
        System.out.println("‚Ä¢ DELETE http://localhost:8080/tasks/{id}");
        System.out.println("‚Ä¢ GET  http://localhost:8080/epics");
        System.out.println("‚Ä¢ GET  http://localhost:8080/epics/{id}/subtasks");
        System.out.println("‚Ä¢ GET  http://localhost:8080/history");
        System.out.println("‚Ä¢ GET  http://localhost:8080/prioritized");
        System.out.println("==================================================");
    }

    public void stop() {
        server.stop(0);
        System.out.println("üõë HTTP Task Server –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
    }

    public static Gson getGson() {
        return GsonFactory.createGson();
    }

    public static void main(String[] args) throws IOException {
        HttpTaskServer server = new HttpTaskServer();
        server.start();

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        Runtime.getRuntime().addShutdownHook(new Thread(() -> {
            System.out.println("\n–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞...");
            server.stop();
        }));

        // –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª —á—Ç–æ–±—ã —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–≤–µ—Ä—à–∞–ª—Å—è
        try {
            Thread.currentThread().join();
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
    }
}
